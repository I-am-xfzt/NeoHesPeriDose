[
  {
    "title": "SCSS 与 CSS 相比有哪些优势？",
    "category": "SCSS基础",
    "content": "请解释SCSS相比于原生CSS的主要优势。",
    "answer": "SCSS（Sassy CSS）是CSS的预处理器，提供了许多原生CSS不具备的功能，主要优势包括：\n\n1. **变量（Variables）**：可以定义可复用的值，方便统一管理和修改样式\n2. **嵌套（Nesting）**：可以按照HTML的结构嵌套CSS选择器，使代码结构更清晰\n3. **混合宏（Mixins）**：可以定义可复用的样式块，支持参数传递\n4. **继承（Inheritance）**：可以让一个选择器继承另一个选择器的样式\n5. **函数（Functions）**：内置多种颜色处理和数学计算函数\n6. **导入（Import）**：支持将样式文件分割成多个小文件，便于组织和维护\n7. **条件语句和循环**：支持@if、@else、@for、@each等控制指令\n8. **注释**：支持单行注释（//），在编译后会被移除\n\n这些特性使SCSS能够编写更简洁、更易于维护和更灵活的样式代码，特别适合大型项目的样式管理。",
    "code": "// 变量定义\n$primary-color: #3498db;\n$font-size: 16px;\n\n// 混合宏定义\n@mixin button-style($color: $primary-color) {\n  padding: 10px 20px;\n  background-color: $color;\n  color: white;\n  border-radius: 4px;\n  transition: background-color 0.3s;\n\n  &:hover {\n    background-color: darken($color, 10%);\n  }\n}\n\n// 嵌套示例\n.container {\n  width: 100%;\n  max-width: 1200px;\n  margin: 0 auto;\n\n  .header {\n    padding: 20px;\n    background-color: #f5f5f5;\n\n    h1 {\n      font-size: 24px;\n      color: #333;\n    }\n  }\n\n  .btn-primary {\n    @include button-style();\n  }\n\n  .btn-secondary {\n    @include button-style(#2ecc71);\n  }\n}",
    "difficulty": "初级"
  },
  {
    "title": "如何在SCSS中使用变量？",
    "category": "变量",
    "content": "请详细说明在SCSS中变量的定义、使用和作用域规则。",
    "answer": "在SCSS中，变量是一种存储和复用值的机制，使用起来非常灵活。\n\n**变量的定义：**\n使用`$`符号作为前缀来定义变量，语法为：`$变量名: 变量值;`\n\n**变量的使用：**\n在需要使用变量的地方，直接引用变量名即可。\n\n**变量的作用域：**\n1. **局部变量**：在选择器、混合宏或函数内部定义的变量，仅在其定义的块级作用域内有效\n2. **全局变量**：在最外层定义的变量，或使用`!global`标志声明的变量，可以在整个样式文件中访问\n3. **默认变量**：使用`!default`标志声明的变量，如果该变量已经被定义则不会被覆盖\n\n**变量的类型：**\nSCSS支持多种类型的变量值，包括：\n- 数字（可带单位）\n- 字符串\n- 颜色\n- 布尔值\n- 空值\n- 列表\n- 映射\n\n**变量的特殊特性：**\n- 变量可以相互引用\n- 可以在变量定义中使用函数\n- 可以在CSS属性名中使用变量（需要使用`#{$变量名}`插值语法）\n\n合理使用变量可以使样式代码更易于维护，特别是在主题定制、颜色方案统一等场景下。",
    "code": "// 全局变量定义\n$primary-color: #3498db;\n$font-family: 'Arial', sans-serif;\n$spacing-unit: 16px;\n\n// 默认变量\n$border-radius: 4px !default;\n$box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1) !default;\n\n// 局部变量示例\n.container {\n  $container-width: 1200px; // 局部变量\n  width: $container-width;\n  margin: 0 auto;\n  padding: $spacing-unit;\n  font-family: $font-family;\n\n  .card {\n    $card-bg: #ffffff;\n    background-color: $card-bg;\n    border-radius: $border-radius;\n    box-shadow: $box-shadow;\n    padding: $spacing-unit * 1.5; // 变量计算\n\n    .card-title {\n      color: $primary-color;\n      font-size: $spacing-unit * 1.25;\n    }\n  }\n}\n\n// 使用!global标志将局部变量提升为全局变量\n.theme {\n  $theme-color: #e74c3c !global;\n}\n\n.other-element {\n  color: $theme-color; // 可以访问全局变量\n}\n\n// 在属性名中使用变量\n@mixin set-property($property, $value) {\n  #{$property}: $value;\n}",
    "difficulty": "初级"
  },
  {
    "title": "什么是SCSS的嵌套规则？如何使用嵌套？",
    "category": "嵌套",
    "content": "请解释SCSS的嵌套规则及其应用场景。",
    "answer": "SCSS的嵌套规则允许开发者按照HTML的结构层次来组织CSS选择器，使样式代码的结构更清晰、更易读。\n\n**基本嵌套：**\n在父选择器内部定义子选择器的样式，这对应于HTML中的父子关系。\n\n**&符号的使用：**\n`&`符号在嵌套中代表父选择器本身，常用于伪类、伪元素和组合选择器。\n\n**属性嵌套：**\n对于具有相同前缀的CSS属性（如font-、margin-、padding-等），可以进行属性嵌套。\n\n**嵌套的优缺点：**\n**优点：**\n- 代码结构更清晰，与HTML结构对应\n- 减少选择器的重复输入\n- 提高代码的可维护性\n\n**缺点：**\n- 过度嵌套会导致生成的CSS选择器过长，影响性能\n- 可能导致样式覆盖困难\n\n**最佳实践：**\n- 嵌套深度一般不超过3-4层\n- 合理使用&符号\n- 避免不必要的嵌套\n\n嵌套规则特别适合于组件化开发，可以很好地封装组件的样式。",
    "code": "// 基本嵌套示例\n.nav {\n  background-color: #333;\n  padding: 10px 0;\n\n  .nav-list {\n    list-style: none;\n    margin: 0;\n    padding: 0;\n    display: flex;\n\n    .nav-item {\n      margin-right: 20px;\n\n      .nav-link {\n        color: white;\n        text-decoration: none;\n        padding: 5px 10px;\n\n        &:hover {\n          background-color: #555;\n          border-radius: 4px;\n        }\n\n        &.active {\n          background-color: #3498db;\n        }\n      }\n    }\n  }\n}\n\n// &符号的其他用法\n.button {\n  display: inline-block;\n  padding: 10px 20px;\n  background-color: #3498db;\n  color: white;\n  border-radius: 4px;\n  cursor: pointer;\n\n  &--primary {\n    background-color: #3498db;\n  }\n\n  &--secondary {\n    background-color: #2ecc71;\n  }\n\n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n}\n\n// 属性嵌套\n.text {\n  font: {\n    family: 'Arial', sans-serif;\n    size: 16px;\n    weight: bold;\n  }\n\n  margin: {\n    top: 10px;\n    bottom: 10px;\n    left: auto;\n    right: auto;\n  }\n}",
    "difficulty": "初级"
  },
  {
    "category": "其他",
    "title": "Scss除了使用公共类名还有什么方式可以定义可重复使用的样式",
    "content": "使用除了公共类名的方式定义可重复样式",
    "answer": "1. 使用占位符选择器 (Placeholder Selectors) 和@extend；\n2. 使用Mixin (混合宏)；\n3. 使用函数 (Functions)；\n或者使用循或者继承组合使用批量生成公共类名",
    "code": "// 1. 占位符选择\n%button-base {\n  padding: 12px 24px;\n  border: none;\n  border-radius: 4px;\n  font-size: 14px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n%card-base {\n  background: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n  padding: 20px;\n}\n\n// 使用占位符\n.primary-button {\n  @extend %button-base;\n  background: blue;\n  color: white;\n}\n\n.secondary-button {\n  @extend %button-base;\n  background: gray;\n  color: black;\n}\n\n.card {\n  @extend %card-base;\n}\n\n.modal {\n  @extend %card-base;\n  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.2);\n}\n// 2. Mixin \n@mixin flex-center($direction: row) {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: $direction;\n}\n\n@mixin text-ellipsis($lines: 1) {\n  overflow: hidden;\n  @if $lines == 1 {\n    white-space: nowrap;\n    text-overflow: ellipsis;\n  } @else {\n    display: -webkit-box;\n    -webkit-line-clamp: $lines;\n    -webkit-box-orient: vertical;\n  }\n}\n\n@mixin responsive($breakpoint) {\n  @if $breakpoint == mobile {\n    @media (max-width: 768px) { @content; }\n  } @else if $breakpoint == tablet {\n    @media (max-width: 1024px) { @content; }\n  }\n}\n\n// 使用 Mixin\n.container {\n  @include flex-center(column);\n  height: 100vh;\n}\n\n.title {\n  @include text-ellipsis(2);\n  font-size: 24px;\n}\n\n.sidebar {\n  width: 300px;\n  \n  @include responsive(mobile) {\n    width: 100%;\n  }\n}\n// 3. 函数\n// 定义函数\n@function color-shade($color, $percentage) {\n  @return mix(black, $color, $percentage);\n}\n\n@function spacing($multiplier: 1) {\n  @return $multiplier * 8px;\n}\n\n@function em($pixels, $context: 16px) {\n  @return #{$pixels / $context}em;\n}\n\n// 使用函数\n.primary-button {\n  background: color-shade(blue, 20%);\n  padding: spacing(2) spacing(3);\n  font-size: em(18px);\n  \n  &:hover {\n    background: color-shade(blue, 10%);\n  }\n}",
    "difficulty": "高级"
  },
  {
    "category": "混合指令",
    "title": "了解Scss的混合指令吗",
    "content": "请阐述Scss的混合指令",
    "answer": "混合指令（Mixin）用于定义可重复使用的样式，避免了使用无语意的 class，比如 .float-left。混合指令可以包含所有的 CSS 规则，绝大部分 Sass 规则，甚至通过参数功能引入变量，输出多样化的样式。",
    "code": "@mixin large-text {\n  font: {\n    family: Arial;\n    size: 20px;\n    weight: bold;\n  }\n  color: #ff0000;\n}\n\n.page-title {\n  @include large-text;\n  padding: 4px;\n  margin-top: 10px;\n}",
    "difficulty": "中级"
  },
  {
    "category": "函数指令",
    "title": "请解释Scss函数指令 并且说明如何使用函数指令",
    "content": "阐述Sccs函数指令",
    "answer": "Sass 支持自定义函数，并能在任何属性值或 Sass script 中使用，与 mixin 相同，也可以传递若干个全局变量给函数作为参数。一个函数可以含有多条语句，需要调用 @return 输出结果",
    "code": "$grid-width: 40px;\n$gutter-width: 10px;\n\n@function grid-width($n) {\n  @return $n * $grid-width + ($n - 1) * $gutter-width;\n}\n\n#sidebar { width: grid-width(5); }",
    "difficulty": "中级"
  },
  {
    "category": "ScssScript",
    "title": "SassScript 是什么，它有什么功能？",
    "content": "阐述ScssScript,并且给出它的功能",
    "answer": "SassScript 是 Sass 的脚本语言，它扩展了 CSS 的功能，允许使用变量、数学运算、函数等编程特性来编写更智能、可维护的样式表。\n1. Interactive Shell 可以在命令行中测试 SassScript 的功能。在命令行中输入 sass -i，然后输入想要测试的 SassScript 查看输出结果：\n2. 变量 $\n3. 数据类型\n  1. 字符串\n  2. 数组\n  3. Maps\n  4. 颜色\n4. 运算\n  1. 数字运算\n  1. 除法运算 /\n  2. 颜色值运算\n  3. 字符串运算\n  4. 布尔运算\n  5. 数组运算\n5. 圆括号\n6. 函数\n 1. 关键词参数\n7. 插值语句 #{}\n8. & in SassScript\n9. 变量定义 !default",
    "code": " Interactive Shell： 可以在命令行中测试 SassScript 的功能。在命令行中输入 sass -i，然后输入想要测试的 SassScript 查看输出结果：\n$ sass -i\n>> \"Hello, Sassy World!\"\n\"Hello, Sassy World!\"\n>> 1px + 1px + 1px\n3px\n>> #777 + #777\n#eeeeee\n>> #777 + #888\nwhite\n变量 $ (Variables: $) SassScript 最普遍的用法就是变量，变量以美元符号开头，赋值方法与 CSS 属性的写法一样：\n$width: 5em;\n#main {\n  width: $width;\n}\n数据类型SassScript 支持 6 种主要的数据类型：数字 字符串，有引号字符串与无引号字符串，\"foo\", 'bar', baz颜色，blue, #04a3f9, rgba(255,0,0,0.5)布尔型，true, false\n空值，null，数组 (list)，用空格或逗号作分隔符，1.5em 1em 0 2em, Helvetica, Arial, sans-serifmaps, 相当于 JavaScript 的 object，(key1: value1, key2: value2)。\n// 字符串\n$string1: \"Hello Sass\";\n$string2: '单引号字符串';\n$string3: unquote(未引用的字符串);\n// 数组\n$colors-list: red, green, blue; // 逗号分隔\n$spacings: 10px 20px 30px;     // 空格分隔\n$mixed-list: 1px solid #ccc;   // 混合列表\n\n.border {\n  border: $mixed-list;\n}\n.item {\n  margin: nth($spacings, 2); // 获取第二个元素：20px\n}\nMaps (键值对)\n$theme-colors: (\n  primary: #3498db,\n  secondary: #2ecc71,\n  danger: #e74c3c,\n  warning: #f39c12\n);\n\n$breakpoints: (\n  mobile: 768px,\n  tablet: 1024px,\n  desktop: 1200px\n);\n\n.button {\n  background-color: map-get($theme-colors, primary);\n  \n  @media (max-width: map-get($breakpoints, mobile)) {\n    width: 100%;\n  }\n}\n// 颜色 (Colors)\n$color-hex: #ff0000;\n$color-rgb: rgb(255, 0, 0);\n$color-rgba: rgba(255, 0, 0, 0.5);\n$color-hsl: hsl(0, 100%, 50%);\n$color-name: red;\n\n.element {\n  color: $color-hex;\n  background: lighten($color-hex, 20%); // 颜色变亮\n  border-color: transparentize($color-rgb, 0.3); // 增加透明度\n}\n// 运算\n  // 数字运算\n$base-size: 16px;\n$padding: 20px;\n\n.container {\n  width: 100% - 20px;           // 减法\n  height: 50px + 100px;         // 加法\n  font-size: $base-size * 1.5;  // 乘法\n  margin: (100px / 2);          // 除法\n  padding: $padding % 3;        // 取模\n}\n\n// 单位运算\n$width: 100px;\n.box {\n  width: $width * 2;        // 200px\n  height: $width / 2;       // 50px\n}\n // 除法运算 (/)\n// 在以下情况下 / 被视为除法运算：\n$result1: (100px / 2);      // 使用括号：50px\n$result2: $width / 2;       // 使用变量：50px\n$result3: 100px / 2px;      // 使用单位：50\n\n// 在以下情况下 / 保持原样：\n.font-size { \n  font: 14px/1.5 Arial;     // CSS 的 font 属性\n  margin: 10px / 2;         // 不被解析为除法\n}\n // 颜色值运算\n$base-color: #336699;\n\n.color-operations {\n  color: $base-color + #111111;        // #4477aa\n  background: $base-color - #102030;   // #234669\n  border-color: $base-color * 0.8;     // 亮度调整\n  outline-color: rgba($base-color, 0.5) + rgba(red, 0.2); // 透明度混合\n}\n  // 字符串运算\n$name: \"Sass\";\n$version: \"3.5\";\n\n.message {\n  content: \"Welcome to \" + $name + \" \" + $version + \"!\"; // 字符串连接\n  font-family: Arial + \", sans-serif\";\n  data-attr: \"item-\" + 123; // \"item-123\"\n}\n  // 布尔运算\n$is-visible: true;\n$has-border: false;\n\n@if $is-visible and not $has-border {\n  .element {\n    display: block;\n    border: none;\n  }\n}\n\n@if 10 > 5 or 3 == 4 {\n  // 条件成立执行\n}\n // 数组运算\n$list1: 1px, 2px, 3px;\n$list2: 4px, 5px, 6px;\n\n.operations {\n  margin: join($list1, $list2);          // 合并数组\n  padding: append($list1, 4px);          // 追加元素\n  border-width: length($list1);          // 数组长度\n}\n// 圆括号\n$result1: (10px + 5px) * 2;      // 30px\n$result2: 10px + (5px * 2);      // 20px\n$result3: (1 + 2) * (3 + 4);     // 21\n\n.calculation {\n  width: (100% / 3) - 20px;\n  height: (200px + 100px) / 2;\n  margin: (10px * 2) (20px / 2);\n}\n// 函数 \n  // 内置函数\n$color: #3498db;\n\n.color-functions {\n  color: lighten($color, 20%);       // 变亮\n  background: darken($color, 10%);   // 变暗\n  border-color: complement($color);  // 补色\n  opacity: opacity($color);          // 透明度\n}\n\n$list: 10px, 20px, 30px;\n.list-functions {\n  margin: nth($list, 2);             // 20px\n  padding: length($list);            // 3\n  border: join($list, 40px);         // 合并\n}\n  // 关键词参数\n// 定义带关键词参数的 mixin\n@mixin position($top: null, $right: null, $bottom: null, $left: null) {\n  position: absolute;\n  top: $top;\n  right: $right;\n  bottom: $bottom;\n  left: $left;\n}\n\n// 使用关键词参数（顺序无关）\n.modal {\n  @include position($top: 10px, $right: 20px);\n}\n\n.sidebar {\n  @include position($left: 0, $top: 0, $bottom: 0);\n}\n// 插值语句 #{}\n$property: color;\n$direction: top;\n$size: large;\n\n// 在属性名中使用插值\n.#{$size}-text {\n  font-size: 24px;\n}\n\n// 在属性值中使用插值\n.border-#{$direction} {\n  border-#{$direction}: 2px solid red;\n}\n\n// 在选择器中使用插值\n$selector: warning;\n.message-#{$selector} {\n  #{$property}: orange;\n}\n\n// 在 @规则中使用插值\n$breakpoint: mobile;\n@media (max-width: #{$breakpoint}) {\n  .container {\n    width: 100%;\n  }\n}\n// & in SassScript\n.button {\n  color: blue;\n  \n  // & 引用父选择器\n  &:hover {\n    color: darkblue;\n  }\n  \n  // 在字符串中使用 &\n  &--large {\n    font-size: 20px;\n  }\n  \n  // 多重 &\n  .parent & {\n    margin: 10px;\n  }\n}\n// 变量定义 !default\n// 库文件 _library.scss\n$primary-color: blue !default;\n$padding: 10px !default;\n$font-size: 16px !default;\n\n.button {\n  color: $primary-color;\n  padding: $padding;\n  font-size: $font-size;\n}\n\n// 主文件 style.scss\n$primary-color: red;    // 覆盖默认值\n$font-size: 18px;       // 覆盖默认值\n// $padding 使用默认值 10px\n@import 'library';\n// 结果：\n// .button { color: red; padding: 10px; font-size: 18px; }\n// 自定义函数\n// 自定义函数\n@function calculate-rem($px) {\n  @return ($px / 16px) * 1rem;\n}\n\n@function color-shade($color, $percentage) {\n  @return mix(black, $color, $percentage);\n}\n\n@function grid-width($columns, $total-columns: 12) {\n  @return percentage($columns / $total-columns);\n}\n\n// 使用自定义函数\n.text {\n  font-size: calculate-rem(24px); // 1.5rem\n  color: color-shade(blue, 20%);\n}\n\n.column {\n  width: grid-width(6); // 50%\n}"
  },
  {
    "category": "控制指令",
    "title": "请解释Scss控制指令",
    "content": "阐述Scss的控制指令",
    "answer": "1. if\n2. @if\n3. @for\n4. @each 8.4.1 Multiple Assignment\n5. @while",
    "code": "// 1. if\n// 语法：if(condition, value-if-true, value-if-false)\n$theme: dark;\n$text-color: if($theme == dark, white, black); // 白色\n\n$size: large;\n$padding: if($size == large, 20px, if($size == medium, 15px, 10px));\n\n.button {\n  color: $text-color;\n  padding: $padding;\n  background: if($theme == dark, #333, #f5f5f5);\n}\n\n// 嵌套使用\n$is-rounded: true;\n$border-radius: if($is-rounded, 8px, 0);\n\n.card {\n  border-radius: $border-radius;\n  box-shadow: if($border-radius > 0, 0 2px 8px rgba(0,0,0,0.1), none);\n}\n2.  @if\n$theme: light;\n\n// 简单的 @if\n.theme-selector {\n  @if $theme == light {\n    background: white;\n    color: black;\n  }\n}\n\n// @if @else\n.message {\n  padding: 10px;\n  \n  @if $theme == dark {\n    background: #333;\n    color: white;\n  } @else {\n    background: #f5f5f5;\n    color: #333;\n  }\n}\n\n// 多重条件 @if @else if @else\n$alert-type: warning;\n\n.alert {\n  padding: 15px;\n  border-radius: 4px;\n  \n  @if $alert-type == success {\n    background: #d4edda;\n    color: #155724;\n    border: 1px solid #c3e6cb;\n  } @else if $alert-type == warning {\n    background: #fff3cd;\n    color: #856404;\n    border: 1px solid #ffeaa7;\n  } @else if $alert-type == error {\n    background: #f8d7da;\n    color: #721c24;\n    border: 1px solid #f5c6cb;\n  } @else {\n    background: #d1ecf1;\n    color: #0c5460;\n    border: 1px solid #bee5eb;\n  }\n}\n// 复杂条件\n$user-role: admin;\n$is-mobile: true;\n$has-permission: true;\n\n.access-control {\n  @if $user-role == admin and $has-permission {\n    display: block;\n    opacity: 1;\n  } @else if $user-role == editor and not $is-mobile {\n    display: block;\n    opacity: 0.8;\n  } @else {\n    display: none;\n  }\n}\n\n// 数学比较\n$width: 768px;\n\n.container {\n  @if $width >= 768px {\n    max-width: 1200px;\n    margin: 0 auto;\n  } @else {\n    width: 100%;\n    padding: 0 20px;\n  }\n}\n// 3. @for \n// 语法1: @for $var from <start> through <end> (包含结束值)\n// 语法2: @for $var from <start> to <end> (不包含结束值)\n\n// 生成间距工具类\n@for $i from 1 through 5 {\n  .mt-#{$i} { margin-top: #{$i * 4}px; }\n  .mb-#{$i} { margin-bottom: #{$i * 4}px; }\n  .ml-#{$i} { margin-left: #{$i * 4}px; }\n  .mr-#{$i} { margin-right: #{$i * 4}px; }\n}\n\n// 生成网格系统\n@for $i from 1 through 12 {\n  .col-#{$i} {\n    width: percentage($i / 12);\n    float: left;\n    padding: 0 15px;\n  }\n}\n\n// 使用 to 关键字（不包含结束值）\n@for $i from 1 to 6 { // 1-5\n  .z-index-#{$i} {\n    z-index: $i * 100;\n  }\n}\n\n// 递减循环\n@for $i from 5 through 1 {\n  .font-size-#{6 - $i} {\n    font-size: #{$i * 4}px;\n  }\n}\n// 实际应用\n$base-color: #3498db;\n\n@for $i from 1 through 10 {\n  .color-level-#{$i} {\n    background: lighten($base-color, $i * 5%);\n    color: if($i > 5, white, black);\n  }\n}\n\n// 生成动画延迟\n@for $i from 1 through 10 {\n  .delay-#{$i} {\n    animation-delay: #{$i * 0.1}s;\n  }\n}\n// 4. @each\n// 遍历简单列表\n$colors: primary, secondary, success, warning, danger;\n\n@each $color in $colors {\n  .btn-#{$color} {\n    background: var(--color-#{$color});\n    \n    &:hover {\n      background: darken(var(--color-#{$color}), 10%);\n    }\n  }\n}\n\n// 遍历复杂列表\n$icons: (home, \"\\f015\"), (user, \"\\f007\"), (settings, \"\\f013\");\n\n@each $name, $unicode in $icons {\n  .icon-#{$name}:before {\n    content: $unicode;\n    font-family: \"FontAwesome\";\n  }\n}\n// 遍历\n// 定义主题颜色映射\n$theme-colors: (\n  primary: #3498db,\n  secondary: #95a5a6,\n  success: #2ecc71,\n  danger: #e74c3c,\n  warning: #f39c12\n);\n\n$spacing-scale: (\n  xs: 4px,\n  sm: 8px,\n  md: 16px,\n  lg: 24px,\n  xl: 32px\n);\n\n// 遍历颜色映射生成工具类\n@each $name, $color in $theme-colors {\n  .text-#{$name} {\n    color: $color;\n  }\n  \n  .bg-#{$name} {\n    background-color: $color;\n  }\n  \n  .border-#{$name} {\n    border-color: $color;\n  }\n}\n\n// 遍历间距映射\n@each $size, $value in $spacing-scale {\n  .p-#{$size} { padding: $value; }\n  .m-#{$size} { margin: $value; }\n  .gap-#{$size} { gap: $value; }\n}\n// 多重赋值\n// 复杂数据结构遍历\n$components: (\n  (button, 200px, #3498db),\n  (card, 300px, #2ecc71),\n  (modal, 500px, #e74c3c)\n);\n\n@each $name, $width, $color in $components {\n  .#{$name}-component {\n    width: $width;\n    background: $color;\n    padding: 20px;\n    border-radius: 4px;\n    \n    &::after {\n      content: \"#{$name} - #{$width}\";\n      color: lighten($color, 40%);\n    }\n  }\n}\n\n// 响应式断点系统\n$breakpoints: (\n  (mobile, 768px, 100%),\n  (tablet, 1024px, 90%),\n  (desktop, 1200px, 1200px)\n);\n\n@each $name, $breakpoint, $container-width in $breakpoints {\n  @media (max-width: $breakpoint) {\n    .container-#{$name} {\n      width: $container-width;\n      margin: 0 auto;\n    }\n    \n    .hidden-#{$name} {\n      display: none;\n    }\n  }\n}\n\n// 图标和颜色组合\n$icon-themes: (\n  (success, check, #2ecc71),\n  (error, times, #e74c3c),\n  (warning, exclamation, #f39c12),\n  (info, info, #3498db)\n);\n\n@each $theme, $icon, $color in $icon-themes {\n  .icon-#{$theme} {\n    &::before {\n      content: $icon;\n      font-family: \"IconFont\";\n      color: $color;\n    }\n    \n    background: lighten($color, 40%);\n    border: 1px solid $color;\n  }\n}\n// 5. @while\n// 基础用法：生成字体大小层级\n$level: 1;\n$font-size: 12px;\n\n@while $level <= 6 {\n  .heading-#{$level} {\n    font-size: $font-size;\n    font-weight: bold;\n    margin-bottom: $font-size * 0.5;\n  }\n  \n  $font-size: $font-size * 1.2; // 每次增加20%\n  $level: $level + 1;\n}\n\n// 生成三角形阴影效果\n$shadow-level: 1;\n$shadow-opacity: 0.1;\n\n.shadow-container {\n  position: relative;\n  \n  @while $shadow-level <= 5 {\n    &::after {\n      content: '';\n      position: absolute;\n      top: $shadow-level * 2px;\n      left: $shadow-level * 2px;\n      right: -$shadow-level * 2px;\n      bottom: -$shadow-level * 2px;\n      background: rgba(0, 0, 0, $shadow-opacity);\n      z-index: -1;\n    }\n    \n    $shadow-level: $shadow-level + 1;\n    $shadow-opacity: $shadow-opacity - 0.02;\n  }\n}\n\n// 生成网格背景\n$grid-size: 5;\n$grid-opacity: 0.3;\n\n.grid-background {\n  background-image: linear-gradient(\n    rgba(0, 0, 0, $grid-opacity) 1px,\n    transparent 1px\n  );\n  background-size: 20px 20px;\n  \n  @while $grid-size <= 20 {\n    &--density-#{$grid-size} {\n      background-size: #{$grid-size}px #{$grid-size}px;\n    }\n    \n    $grid-size: $grid-size + 5;\n    $grid-opacity: $grid-opacity - 0.05;\n  }\n}\n\n// 安全循环（避免无限循环）\n$counter: 1;\n$max-iterations: 10;\n\n@while $counter <= $max-iterations {\n  .loading-dot-#{$counter} {\n    animation-delay: #{$counter * 0.1}s;\n    opacity: 1 - ($counter * 0.1);\n  }\n  \n  $counter: $counter + 1;\n}",
    "difficulty": "中级"
  }
]